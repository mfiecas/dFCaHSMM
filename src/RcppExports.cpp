// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// covmat_c
arma::mat covmat_c(arma::mat Xt, arma::vec mu, arma::vec u);
RcppExport SEXP _dFCaHSMM_covmat_c(SEXP XtSEXP, SEXP muSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(covmat_c(Xt, mu, u));
    return rcpp_result_gen;
END_RCPP
}
// standardize_rows_cpp
arma::mat standardize_rows_cpp(arma::mat A);
RcppExport SEXP _dFCaHSMM_standardize_rows_cpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(standardize_rows_cpp(A));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrm_arma
arma::vec dmvnrm_arma(const arma::mat& x, const arma::rowvec& mean, const arma::mat& sigma, bool logd, bool chol);
RcppExport SEXP _dFCaHSMM_dmvnrm_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP, SEXP cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< bool >::type chol(cholSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrm_arma(x, mean, sigma, logd, chol));
    return rcpp_result_gen;
END_RCPP
}
// logvec_c
arma::vec logvec_c(const arma::vec& x);
RcppExport SEXP _dFCaHSMM_logvec_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logvec_c(x));
    return rcpp_result_gen;
END_RCPP
}
// logsumexp_cpp
double logsumexp_cpp(arma::vec X);
RcppExport SEXP _dFCaHSMM_logsumexp_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(logsumexp_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// get_locations
arma::umat get_locations(arma::sp_mat& B);
RcppExport SEXP _dFCaHSMM_get_locations(SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(get_locations(B));
    return rcpp_result_gen;
END_RCPP
}
// vec2params_covar
void vec2params_covar(const arma::vec& params_vec, int num_states, int Z_n_cols, arma::mat& betahat);
RcppExport SEXP _dFCaHSMM_vec2params_covar(SEXP params_vecSEXP, SEXP num_statesSEXP, SEXP Z_n_colsSEXP, SEXP betahatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params_vec(params_vecSEXP);
    Rcpp::traits::input_parameter< int >::type num_states(num_statesSEXP);
    Rcpp::traits::input_parameter< int >::type Z_n_cols(Z_n_colsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type betahat(betahatSEXP);
    vec2params_covar(params_vec, num_states, Z_n_cols, betahat);
    return R_NilValue;
END_RCPP
}
// params2vec_covar
arma::vec params2vec_covar(const arma::mat& beta, int num_states, int Z_n_cols);
RcppExport SEXP _dFCaHSMM_params2vec_covar(SEXP betaSEXP, SEXP num_statesSEXP, SEXP Z_n_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type num_states(num_statesSEXP);
    Rcpp::traits::input_parameter< int >::type Z_n_cols(Z_n_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(params2vec_covar(beta, num_states, Z_n_cols));
    return rcpp_result_gen;
END_RCPP
}
// get_emission_distribution
void get_emission_distribution(const arma::cube& Xt, const arma::cube& u_all, const arma::vec& m, arma::cube& SampCov, arma::mat& mu_hat_next, arma::cube& Sigma_hat_next, arma::cube& Omega_hat_next);
RcppExport SEXP _dFCaHSMM_get_emission_distribution(SEXP XtSEXP, SEXP u_allSEXP, SEXP mSEXP, SEXP SampCovSEXP, SEXP mu_hat_nextSEXP, SEXP Sigma_hat_nextSEXP, SEXP Omega_hat_nextSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type u_all(u_allSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type SampCov(SampCovSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mu_hat_next(mu_hat_nextSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Sigma_hat_next(Sigma_hat_nextSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Omega_hat_next(Omega_hat_nextSEXP);
    get_emission_distribution(Xt, u_all, m, SampCov, mu_hat_next, Sigma_hat_next, Omega_hat_next);
    return R_NilValue;
END_RCPP
}
// forward_backward_hsmm_cpp
List forward_backward_hsmm_cpp(const arma::mat& Xt, const arma::vec& m, const arma::sp_mat& B, const arma::mat& mu, const arma::cube& root, const arma::vec& delta, bool chol);
RcppExport SEXP _dFCaHSMM_forward_backward_hsmm_cpp(SEXP XtSEXP, SEXP mSEXP, SEXP BSEXP, SEXP muSEXP, SEXP rootSEXP, SEXP deltaSEXP, SEXP cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type root(rootSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type chol(cholSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_backward_hsmm_cpp(Xt, m, B, mu, root, delta, chol));
    return rcpp_result_gen;
END_RCPP
}
// pk_cpp
long double pk_cpp(int r, double lambda, int tau);
RcppExport SEXP _dFCaHSMM_pk_cpp(SEXP rSEXP, SEXP lambdaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(pk_cpp(r, lambda, tau));
    return rcpp_result_gen;
END_RCPP
}
// Fk_cpp
long double Fk_cpp(double r, double lambda, int tau);
RcppExport SEXP _dFCaHSMM_Fk_cpp(SEXP rSEXP, SEXP lambdaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(Fk_cpp(r, lambda, tau));
    return rcpp_result_gen;
END_RCPP
}
// ck_cpp
long double ck_cpp(double r, double lambda, int tau, int verbose);
RcppExport SEXP _dFCaHSMM_ck_cpp(SEXP rSEXP, SEXP lambdaSEXP, SEXP tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ck_cpp(r, lambda, tau, verbose));
    return rcpp_result_gen;
END_RCPP
}
// grad_ck_cpp
long double grad_ck_cpp(double r, double lambda, int tau, int verbose);
RcppExport SEXP _dFCaHSMM_grad_ck_cpp(SEXP rSEXP, SEXP lambdaSEXP, SEXP tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_ck_cpp(r, lambda, tau, verbose));
    return rcpp_result_gen;
END_RCPP
}
// create_Bij_cpp
arma::mat create_Bij_cpp(double lambda, double aij, int mi, int mj, int tau);
RcppExport SEXP _dFCaHSMM_create_Bij_cpp(SEXP lambdaSEXP, SEXP aijSEXP, SEXP miSEXP, SEXP mjSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type aij(aijSEXP);
    Rcpp::traits::input_parameter< int >::type mi(miSEXP);
    Rcpp::traits::input_parameter< int >::type mj(mjSEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(create_Bij_cpp(lambda, aij, mi, mj, tau));
    return rcpp_result_gen;
END_RCPP
}
// create_gradBij_cpp
arma::mat create_gradBij_cpp(double lambda, int mi, int mj, int tau);
RcppExport SEXP _dFCaHSMM_create_gradBij_cpp(SEXP lambdaSEXP, SEXP miSEXP, SEXP mjSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type mi(miSEXP);
    Rcpp::traits::input_parameter< int >::type mj(mjSEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(create_gradBij_cpp(lambda, mi, mj, tau));
    return rcpp_result_gen;
END_RCPP
}
// create_Bii_cpp
arma::mat create_Bii_cpp(double lambda, double mi, int tau, int verbose);
RcppExport SEXP _dFCaHSMM_create_Bii_cpp(SEXP lambdaSEXP, SEXP miSEXP, SEXP tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type mi(miSEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(create_Bii_cpp(lambda, mi, tau, verbose));
    return rcpp_result_gen;
END_RCPP
}
// create_gradBii_cpp
arma::mat create_gradBii_cpp(double lambda, double mi, int tau, int verbose);
RcppExport SEXP _dFCaHSMM_create_gradBii_cpp(SEXP lambdaSEXP, SEXP miSEXP, SEXP tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type mi(miSEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(create_gradBii_cpp(lambda, mi, tau, verbose));
    return rcpp_result_gen;
END_RCPP
}
// create_B_cpp
arma::sp_mat create_B_cpp(arma::vec lambda, arma::vec m, arma::mat A, int tau, int verbose);
RcppExport SEXP _dFCaHSMM_create_B_cpp(SEXP lambdaSEXP, SEXP mSEXP, SEXP ASEXP, SEXP tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(create_B_cpp(lambda, m, A, tau, verbose));
    return rcpp_result_gen;
END_RCPP
}
// create_gradB_cpp
arma::mat create_gradB_cpp(arma::vec lambda, arma::vec m, int tau, int verbose);
RcppExport SEXP _dFCaHSMM_create_gradB_cpp(SEXP lambdaSEXP, SEXP mSEXP, SEXP tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(create_gradB_cpp(lambda, m, tau, verbose));
    return rcpp_result_gen;
END_RCPP
}
// get_lambdan
arma::vec get_lambdan(const arma::vec& Zn, const arma::mat& beta);
RcppExport SEXP _dFCaHSMM_get_lambdan(SEXP ZnSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Zn(ZnSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_lambdan(Zn, beta));
    return rcpp_result_gen;
END_RCPP
}
// term2_covar_cpp
double term2_covar_cpp(arma::vec params_vec, const arma::cube& Amat, arma::mat Z, arma::vec m, const arma::cube& sum_t_vjk, int verbose);
RcppExport SEXP _dFCaHSMM_term2_covar_cpp(SEXP params_vecSEXP, SEXP AmatSEXP, SEXP ZSEXP, SEXP mSEXP, SEXP sum_t_vjkSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type params_vec(params_vecSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sum_t_vjk(sum_t_vjkSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(term2_covar_cpp(params_vec, Amat, Z, m, sum_t_vjk, verbose));
    return rcpp_result_gen;
END_RCPP
}
// grad_term2_cpp
arma::mat grad_term2_cpp(arma::vec params_vec, const arma::cube& Amat, const arma::mat& Z, const arma::vec& m, const arma::cube sum_t_vjk);
RcppExport SEXP _dFCaHSMM_grad_term2_cpp(SEXP params_vecSEXP, SEXP AmatSEXP, SEXP ZSEXP, SEXP mSEXP, SEXP sum_t_vjkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type params_vec(params_vecSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type sum_t_vjk(sum_t_vjkSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_term2_cpp(params_vec, Amat, Z, m, sum_t_vjk));
    return rcpp_result_gen;
END_RCPP
}
// optim_covar_rcpp
arma::vec optim_covar_rcpp(const arma::vec& params_vec, const arma::cube& Amat, const arma::mat& Z, const arma::vec& m, const arma::cube& sum_t_vjk);
RcppExport SEXP _dFCaHSMM_optim_covar_rcpp(SEXP params_vecSEXP, SEXP AmatSEXP, SEXP ZSEXP, SEXP mSEXP, SEXP sum_t_vjkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params_vec(params_vecSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sum_t_vjk(sum_t_vjkSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_covar_rcpp(params_vec, Amat, Z, m, sum_t_vjk));
    return rcpp_result_gen;
END_RCPP
}
// em_estep_covar
void em_estep_covar(const arma::cube& Xt, const arma::mat& Z, const arma::vec& m, const arma::mat& beta, const arma::cube& A, const arma::mat& mu, const arma::cube& Sigma, const arma::mat& delta, int iter, arma::cube& lalpha, arma::cube& lbeta, arma::mat& llk, arma::cube& sum_t_vjk, arma::cube& u_all);
RcppExport SEXP _dFCaHSMM_em_estep_covar(SEXP XtSEXP, SEXP ZSEXP, SEXP mSEXP, SEXP betaSEXP, SEXP ASEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP deltaSEXP, SEXP iterSEXP, SEXP lalphaSEXP, SEXP lbetaSEXP, SEXP llkSEXP, SEXP sum_t_vjkSEXP, SEXP u_allSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type lalpha(lalphaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type lbeta(lbetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type llk(llkSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type sum_t_vjk(sum_t_vjkSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type u_all(u_allSEXP);
    em_estep_covar(Xt, Z, m, beta, A, mu, Sigma, delta, iter, lalpha, lbeta, llk, sum_t_vjk, u_all);
    return R_NilValue;
END_RCPP
}
// get_Ahat
arma::cube get_Ahat(const arma::cube& sum_t_vjk, const arma::vec& m, int num_states);
RcppExport SEXP _dFCaHSMM_get_Ahat(SEXP sum_t_vjkSEXP, SEXP mSEXP, SEXP num_statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type sum_t_vjk(sum_t_vjkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type num_states(num_statesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Ahat(sum_t_vjk, m, num_states));
    return rcpp_result_gen;
END_RCPP
}
// em_mstep_covar
void em_mstep_covar(const arma::cube& Xt, const arma::mat& Z, const arma::vec& m, const arma::cube& sum_t_vjk, const arma::cube& u_all, const arma::mat& beta_hat, arma::mat& beta_hat_next, arma::cube& A_hat_next, arma::mat& delta_hat_next, arma::mat& mu_hat_next, arma::cube& SampCov, arma::cube& Sigma_hat_next, arma::cube& Omega_hat_next, bool refit);
RcppExport SEXP _dFCaHSMM_em_mstep_covar(SEXP XtSEXP, SEXP ZSEXP, SEXP mSEXP, SEXP sum_t_vjkSEXP, SEXP u_allSEXP, SEXP beta_hatSEXP, SEXP beta_hat_nextSEXP, SEXP A_hat_nextSEXP, SEXP delta_hat_nextSEXP, SEXP mu_hat_nextSEXP, SEXP SampCovSEXP, SEXP Sigma_hat_nextSEXP, SEXP Omega_hat_nextSEXP, SEXP refitSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sum_t_vjk(sum_t_vjkSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type u_all(u_allSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_hat(beta_hatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_hat_next(beta_hat_nextSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type A_hat_next(A_hat_nextSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta_hat_next(delta_hat_nextSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mu_hat_next(mu_hat_nextSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type SampCov(SampCovSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Sigma_hat_next(Sigma_hat_nextSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Omega_hat_next(Omega_hat_nextSEXP);
    Rcpp::traits::input_parameter< bool >::type refit(refitSEXP);
    em_mstep_covar(Xt, Z, m, sum_t_vjk, u_all, beta_hat, beta_hat_next, A_hat_next, delta_hat_next, mu_hat_next, SampCov, Sigma_hat_next, Omega_hat_next, refit);
    return R_NilValue;
END_RCPP
}
// hsmm_cpp
List hsmm_cpp(const arma::cube& Xt, const arma::mat& Z, const arma::cube& A_init, const arma::mat& mu_init, const arma::cube& Sigma_init, const arma::mat& beta_init, const arma::vec& m, int maxiter, double tol, bool verbose, bool refit);
RcppExport SEXP _dFCaHSMM_hsmm_cpp(SEXP XtSEXP, SEXP ZSEXP, SEXP A_initSEXP, SEXP mu_initSEXP, SEXP Sigma_initSEXP, SEXP beta_initSEXP, SEXP mSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP refitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type A_init(A_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Sigma_init(Sigma_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type refit(refitSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_cpp(Xt, Z, A_init, mu_init, Sigma_init, beta_init, m, maxiter, tol, verbose, refit));
    return rcpp_result_gen;
END_RCPP
}
